use ctrl + f to search what you want

---------------------------------------------------------------------------------

sumary

1....what's node?
	1.1....Some features of node
	1.2....Some Important Things
	1.3....Package JSON
	1.4....Modules
		1.4.1....Module Comands
	1.5....Comands	

2....MongoDB
	2.1....What's Mongo?
	2.2....Instalation

3....Docker
	3.1....What's docker?
	3.2....Some Features


--------------------------------------------------------------------------------

1. What is node.js?
	the node "simulates" the v8[1] and forces the js to execute his powers in other more unusual places, such as in terminals. Overall with node you can use js commands "wherever" you want.

	 		[1] -> Virtual machine v8 is the engine of some browsers to run JS, made by google. example of use:chrome and opera. technically, it compiles and decompiles the binariocodes generated by js, making its processes faster (similar to java JVM);	


	1.1 some features of node
		- node are a compiler, so its fast and multiplataform
		- in node, all archives are modules	 	


	1.2 Some important things
		- Libuv -> 
				c++ library made for the node, using c++ makes javascript chat with the operating system.

		- NPM -> 
				is a site/colection of libarys that brings together all kinds of libarys , in practice, a package manager, serves for basically everything that involves installing things in the node, usually uses to download libaries		

		- NVM -> 
				version controller, manages the node version (APPARENTLY it is possible to use more than one version at the same time in the same project).

		- REPL ->
				a command-line tool (ultra mega blaster simplifying is like an IDE) that is used directly in the console (do not even need to save the file).


	1.3 package JSON		
		The package.json file is the center of any Node.js or npm. It stores information about your project, similar to that section <head> of an HTML document. It consists of a single JSON object, where information is stored in key-value pairs. There are only two required fields: "name" and "version". However, it is good practice to provide additional information about your project that may be useful to future users or maintainers

		but the most important feature of package is its practicality to install dependences[1], because it have one field called "dependence", here you put whatever you need to run and the best part! with teh simple command "npm install"[2] node will read that field and install whatever you need automatically!

			[1] -> one dependence its something(generally a library) that you will need to install to execute the archive

			[2] -> Npm its the most famous and popular library of node and on the pratice, everthing that you could need will be there

	1.4 Modules
		 like a private class, only he has access to his stuff, but can be exported to other archives, literally like an POO java class


		 1.4.1 Comands

				 exports one object to outside of module{
				 need to be used on module that will be exported
					module.export(obj);
						- ex: module.export(somar);
							somar its a function.
					}


				impots module{	
				var varname = require("modulename");
					need to be used on archive that will import the module!
					stores the module in varname.
						- ex: var module = require("coolmodule");	
					}
								

	1.5 Commands
	
		npm install algo
			- install algo of npm library
				ex: npm install express


		node algo -v
			- verify the version of algo.


		node
			- inicializate REPL, so now you will be able to use your ilimitaded js power on cmd.


		^c 
			- ends REPL.		
				^ = ctrl, in the case ctrl+c


		node name_of_archive
			- execute the archive on REPL.		


		cd algo
			- go to algo


		npm init 
			- create package JSON


		npm init -y
			- create um package JSON com base nas informações dum arquivo .npmrc[1]

				[1] -> sets one default to all packages jsons, like a constructor method(Java POO)
					example:
						npm set init.author.email "email"

						npm set init.author.name "user"	

--------------------------------------------------------------------------------

2. What's MongoDB?
	its a "database manager" that uses JSON objects (technically BSON, binary criptograped JSON), but it is so much strange to a sql user because...

		tables becomes collections
		columns becomes fields
		rows becomes documents

	and yes, by that it is so more simple to use and manage than sql


	2.1 Instalation

	first -> npm install mongo
			 npm install mongod

	second -> create on C: the folder data and enter on it
	
		/// that part is not done yet because its very boring ":D /// 		 			

--------------------------------------------------------------------------------

3.1 Whats Docker
	docker simulates ONE SMALL PART of some linux OS(diferentelly of VMs, them simulates all OS, so them are SOOOOOOOOOOOOOO MANY HEAVY), that system was created to universify the codes, because some archives maybe can need XXX version of X app and the dev1 created the app with XXX version of app, but dev2 with his XYZ version of X app want to edit dev1's archive, in a normal situation the dev2 would need to install X app in the XXX version and that is very boring,stressfull and unecessary

	but with docker, it simulates X app on XXX version for dev2 and he dont care with that! because dev1 created the archive and shiped it with X app on docker and sended that archive to dev2


	3.2 Some Features
		- docker uses a layer system that execute layer per layer, so it is fast and powerfull

		- its creates a image with whatever that app will need but this image only can be read, so docker instaciate the image to container, container is a new layer of image just for edit the image(container layer is readeble and editable), it can smell stupid but that's what changes everything! because just one layer is """""""realy"""""" changed for system so everthing what you do is ectremaly fast! even if your image have 3000000000 lines, because the image are separated on layers!

--------------------------------------------------------------------------------














